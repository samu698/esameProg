<?xml version="1.0"?>

<ruleset name="Programmazione II @ DI Rules"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Rules adopted for the course of "Programmazione II" at the University of Milano. 
    </description>

    <!-- Best Practices -->

    <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod" />
    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly">
      <properties>
          <property name="allowPrivate" value="true" />
      </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace" />
    <rule ref="category/java/bestpractices.xml/AvoidReassigningCatchVariables" />
    <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables">
      <properties>
          <property name="foreachReassign" value="firstOnly" />
          <property name="forReassign" value="skip" />
      </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters" />
    <rule ref="category/java/bestpractices.xml/ConstantsInInterface">
      <properties>
          <property name="ignoreIfHasMethods" value="true" />
      </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt" />
    <rule ref="category/java/bestpractices.xml/DoubleBraceInitialization" />
    <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach" />
    <rule ref="category/java/bestpractices.xml/ForLoopVariableCount">
      <properties>
          <property name="maximumVariables" value="2" />
      </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons" />
    <rule ref="category/java/bestpractices.xml/LooseCoupling" />
    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray" />
    <rule ref="category/java/bestpractices.xml/MissingOverride" />
    <rule ref="category/java/bestpractices.xml/PreserveStackTrace" />
    <rule ref="category/java/bestpractices.xml/PrimitiveWrapperInstantiation" />
    <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator" />
    <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap" />
    <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList" />
    <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault" />
    <!--
    <rule ref="category/java/bestpractices.xml/UnusedAssignment">
      <properties>
          <property name="checkUnusedPrefixIncrement" value="true" />
          <property name="reportUnusedVariables" value="true" />
      </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/UnusedFormalParameter">
      <properties>
          <property name="checkAll" value="true" />
      </properties>
    </rule>
    -->
    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" />
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField" />
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod" />
    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty" />
    <rule ref="category/java/bestpractices.xml/UseTryWithResources" />
    <rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean" />

    <!-- Code Style -->

    <rule ref="category/java/codestyle.xml/AtLeastOneConstructor" />
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />
    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending" />
    <rule ref="category/java/codestyle.xml/CallSuperInConstructor" />
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
      <properties>
          <property name="testClassPattern" value="[A-Z][a-zA-Z0-9]*" />
      </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/EmptyControlStatement" />
    <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract" />
    <rule ref="category/java/codestyle.xml/ExtendsObject" />
    <rule ref="category/java/codestyle.xml/FieldNamingConventions" />
    <rule ref="category/java/codestyle.xml/FinalParameterInAbstractMethod" />
    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" />
    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions" />  
    <rule ref="category/java/codestyle.xml/GenericsNaming" />
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches" />
    <!--
    <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal">
      <properties>
          <property name="ignoreForEachDecl" value="false" />
      </properties>
    </rule>
    -->
    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions" />
    <!--
    <rule ref="category/java/codestyle.xml/LongVariable">
      <properties>
          <property name="minimum" value="15" />
      </properties>
    </rule>
    -->
    <!-- <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal" /> -->
    <rule ref="category/java/codestyle.xml/MethodNamingConventions" />
    <rule ref="category/java/codestyle.xml/PackageCase" />
    <!-- <rule ref="category/java/codestyle.xml/UnnecessaryBoxing" /> -->
    <rule ref="category/java/codestyle.xml/UnnecessaryCast" />
    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor" />
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName" />
    <rule ref="category/java/codestyle.xml/UnnecessaryImport" />
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn" />
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier" />
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn" />
    <rule ref="category/java/codestyle.xml/UnnecessarySemicolon" />
    <rule ref="category/java/codestyle.xml/UseDiamondOperator" />
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis" />
    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer" />

    <!-- Design -->

    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" />
    <rule ref="category/java/design.xml/AvoidCatchingGenericException" />
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
      <properties>
          <property name="problemDepth" value="3" />
      </properties>
    </rule>
    <rule ref="category/java/design.xml/AvoidRethrowingException" />
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes" />
    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
    <!--
    <rule ref="category/java/design.xml/CognitiveComplexity">
      <properties>
          <property name="reportLevel" value="15" />
      </properties>
    </rule>
    -->
    <rule ref="category/java/design.xml/CollapsibleIfStatements" />
    <rule ref="category/java/design.xml/CouplingBetweenObjects">
      <properties>
          <property name="threshold" value="20" />
      </properties>
    </rule>
    <!--
    <rule ref="category/java/design.xml/CyclomaticComplexity">
      <properties>
          <property name="classReportLevel" value="80" />
          <property name="methodReportLevel" value="10" />
          <property name="cycloOptions" value="" />
      </properties>
    </rule>
    -->
    <rule ref="category/java/design.xml/DataClass" />
    <rule ref="category/java/design.xml/ExceptionAsFlowControl" />
    <rule ref="category/java/design.xml/ExcessiveParameterList">
      <properties>
          <property name="minimum" value="10" />
      </properties>
    </rule>
    <rule ref="category/java/design.xml/ExcessivePublicCount">
      <properties>
          <property name="minimum" value="45" />
      </properties>
    </rule>
    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic" />
    <rule ref="category/java/design.xml/GodClass" />
    <rule ref="category/java/design.xml/ImmutableField" />
    <!--
    <rule ref="category/java/design.xml/LawOfDemeter">
      <properties>
          <property name="trustRadius" value="1" />
      </properties>
    </rule>
    --> 
    <rule ref="category/java/design.xml/LogicInversion" />
    <rule ref="category/java/design.xml/MutableStaticState" />
    <!--
    <rule ref="category/java/design.xml/NPathComplexity">
      <properties>
          <property name="reportLevel" value="200" />
      </properties>
    </rule>
    -->
    <rule ref="category/java/design.xml/SignatureDeclareThrowsException" />
    <rule ref="category/java/design.xml/SimplifiedTernary" />
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
    <rule ref="category/java/design.xml/SimplifyBooleanReturns" />
    <rule ref="category/java/design.xml/SimplifyConditional" />
    <rule ref="category/java/design.xml/SingularField" />
    <rule ref="category/java/design.xml/SwitchDensity">
      <properties>
          <property name="minimum" value="10" />
      </properties>
    </rule>
    <rule ref="category/java/design.xml/TooManyFields">
      <properties>
          <property name="maxfields" value="15" />
      </properties>
    </rule>
    <rule ref="category/java/design.xml/TooManyMethods">
      <properties>
          <property name="maxmethods" value="10" />
      </properties>
    </rule>  
    <rule ref="category/java/design.xml/UselessOverridingMethod" />
    <rule ref="category/java/design.xml/UselessOverridingMethod" />
    <rule ref="category/java/design.xml/UseObjectForClearerAPI" />
    <rule ref="category/java/design.xml/UseUtilityClass" />

    <!-- Documentation -->

    <!--
    <rule ref="category/java/documentation.xml/CommentRequired" />
    <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor" />
    <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" />
    -->

    <!-- Error Prone -->

    <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" />
    <rule ref="category/java/errorprone.xml/AvoidCallingFinalize" />
    <rule ref="category/java/errorprone.xml/AvoidCatchingNPE" />
    <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable" />
    <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause" />
    <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition" />
    <rule ref="category/java/errorprone.xml/BrokenNullCheck" />
    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" />
    <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />
    <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName" />
    <rule ref="category/java/errorprone.xml/CloseResource" />
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals" />
    <rule ref="category/java/errorprone.xml/ComparisonWithNaN" />
    <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod" />
    <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable" />
    <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally" />
    <rule ref="category/java/errorprone.xml/EmptyCatchBlock" />
    <rule ref="category/java/errorprone.xml/EqualsNull" />
    <rule ref="category/java/errorprone.xml/IdempotentOperations" />    
    <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough" />
    <rule ref="category/java/errorprone.xml/InstantiationToGetClass" />
    <rule ref="category/java/errorprone.xml/JumbledIncrementer" />
    <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass" />
    <rule ref="category/java/errorprone.xml/MisplacedNullCheck" />
    
</ruleset>
